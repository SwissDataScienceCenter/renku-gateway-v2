// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// PostCliLoginCompleteFormdataBody defines parameters for PostCliLoginComplete.
type PostCliLoginCompleteFormdataBody struct {
	LoginID string `json:"loginID"`
}

// GetLoginParams defines parameters for GetLogin.
type GetLoginParams struct {
	RedirectUrl *string   `form:"redirectUrl,omitempty" json:"redirectUrl,omitempty"`
	ProviderId  *[]string `form:"providerId,omitempty" json:"providerId,omitempty"`
}

// GetLogoutParams defines parameters for GetLogout.
type GetLogoutParams struct {
	RedirectUrl *string `form:"redirectUrl,omitempty" json:"redirectUrl,omitempty"`
}

// PostCliLoginCompleteFormdataRequestBody defines body for PostCliLoginComplete for application/x-www-form-urlencoded ContentType.
type PostCliLoginCompleteFormdataRequestBody PostCliLoginCompleteFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /callback)
	GetCallback(ctx echo.Context) error

	// (POST /cli/login-complete)
	PostCliLoginComplete(ctx echo.Context) error

	// (POST /cli/login-init)
	PostCliLoginInit(ctx echo.Context) error

	// (GET /health)
	GetHealth(ctx echo.Context) error

	// (GET /login)
	GetLogin(ctx echo.Context, params GetLoginParams) error

	// (GET /logout)
	GetLogout(ctx echo.Context, params GetLogoutParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallback(ctx)
	return err
}

// PostCliLoginComplete converts echo context to params.
func (w *ServerInterfaceWrapper) PostCliLoginComplete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCliLoginComplete(ctx)
	return err
}

// PostCliLoginInit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCliLoginInit(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCliLoginInit(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLoginParams
	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", ctx.QueryParams(), &params.RedirectUrl)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirectUrl: %s", err))
	}

	// ------------- Optional query parameter "providerId" -------------

	err = runtime.BindQueryParameter("form", true, false, "providerId", ctx.QueryParams(), &params.ProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogin(ctx, params)
	return err
}

// GetLogout converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogoutParams
	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", ctx.QueryParams(), &params.RedirectUrl)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirectUrl: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogout(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/callback", wrapper.GetCallback)
	router.POST(baseURL+"/cli/login-complete", wrapper.PostCliLoginComplete)
	router.POST(baseURL+"/cli/login-init", wrapper.PostCliLoginInit)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/login", wrapper.GetLogin)
	router.GET(baseURL+"/logout", wrapper.GetLogout)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVT2/juA/9KgLPbtJf53fKbbcFZgMUmMX+Oc3koJEZW1NFcikqmWzh774gHafpxMnO",
	"oYcAsUWRj+89ky/g0qZLESNnWLz0Ffi4TrB4gRqzI9+xTxEW8JgaH806pF1lPv1SuDXOhvDVuqdsbKyN",
	"LdxiZO+sXDDrROYPjE8FKmDPAWEB+mway7ize6hgi5SH5Nv/QV9B6jDazsMCPsxuZ3dQQWe5FVQwH4vJ",
	"Q4N8jk8gJfL/DOVdqlHBHlGakrE2nAyhQ79Fwy0q6B8vUdoYG80nObszX6KvpS3em47S1tdI2i5+d62N",
	"DRrP2quNxjqHORtOTxhnXyJoQ6SplzUs4CPy/dhFBYS5SzGjtvfh9u68o78OACm9Abiz+diLdc/F06GX",
	"k/IKUV4SPhfMbHw2hLUndIy1WRfiFgn6vgK2TYbFZ0hSClbyau6CnwfR+0a8EZBR0HUpT/D+ETlrqXUJ",
	"wWTMIunywexajPpeEwmAMVc9O6Pm95T5Pnj12P1YUjhS9L+mei+FXYqMUTHYrgsHq82/3+x2u5t1os1N",
	"oYBRWKolKLsWN1ahk9RjP7CtiJYP8pf3nTgzM/nYKB9S05Mk+HwMXFVjYPr6DR1D3w+hJxLe3d5ewfgt",
	"C1mXIR15+29Qr6FTsKoJEw0KHOk3uahVRLD9TD68/w/YL91sbTYx8WuGSuSsMXqsTaJXlZcPciChWxt8",
	"PXtjMBf8mb189HzZWn+ypYO5BiAdJfX4+lBUfvePy+t+WkqNdxXrXfxTTc7Xg7jGEVr9UqYZbNEGbi/O",
	"wt/02LXongzGuks+8mxqHg2BF9g5t0NG2nqHOk1KjD42ZmBGfXSCVFfIAFU5uIj0qsS6LyZxK1m6H8hu",
	"kJGk6gtIIXguSLJdot0I4+PY+5sCVCeSnik3fX0c+sv6zW3PuMkTaY5CWyLdcSX654LLIZypYN+vfnb4",
	"l4z0w+TmpFwNrI+U2QZnF2d5SE0qfFGAx9RoRq2VCpu0PvA+vcEeh3TvSv3qZ/2nIGX/nU4wYaGRQVRY",
	"+L/O5pXLujPPqT7sIHw9U8Kn+e4rkG9kJKVQgAXMbefnGtGv+n8DAAD//7rzSMBvCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
